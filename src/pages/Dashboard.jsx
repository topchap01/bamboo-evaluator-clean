import { useState, useRef } from "react";
import { getAuth } from "firebase/auth";
import { db } from "../firebase";
import { collection, addDoc, serverTimestamp } from "firebase/firestore";
import { evaluateCampaign } from "../gptEvaluator";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";

function Dashboard() {
  const [formData, setFormData] = useState({
    brandName: "",
    objective: "",
    targetAudience: "",
    offer: "",
    creativeHeadline: "",
    entryMechanic: "",
    prizeDetails: "",
    mediaBudget: "",
    mediaChannels: "",
    startDate: "",
    endDate: "",
  });

  const [evaluation, setEvaluation] = useState("");

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setEvaluation("⏳ Evaluating campaign...");
    try {
      const response = await evaluateCampaign(formData);
      setEvaluation(response);

      const auth = getAuth();
      const user = auth.currentUser;
      await addDoc(collection(db, "campaignEvaluations"), {
        userId: user ? user.uid : null,
        email: user ? user.email : "anonymous",
        formData,
        evaluation: response,
        createdAt: serverTimestamp(),
      });
    } catch (err) {
      console.error("🔥 Error during evaluation or save:", err);
      setEvaluation("⚠️ Something went wrong. Please try again.");
    }
  };

  const generatePdf = () => {
    const doc = new jsPDF();
    const now = new Date().toLocaleDateString();

    doc.setFont("helvetica", "bold");
    doc.setFontSize(18);
    doc.setTextColor(34, 66, 124);
    doc.text("Bamboo Evaluator Report", 105, 20, null, null, "center");

    doc.setFontSize(12);
    doc.setFont("helvetica", "normal");
    doc.setTextColor(80);
    const spacing = 8;
    const startY = 30;
    const lines = [
      `Brand: ${formData.brandName}`,
      `Objective: ${formData.objective}`,
      `Target Audience: ${formData.targetAudience}`,
      `Offer: ${formData.offer}`,
      `Creative Headline: ${formData.creativeHeadline}`,
      `Entry Mechanic: ${formData.entryMechanic}`,
      `Prize Details: ${formData.prizeDetails}`,
      `Media Budget: ${formData.mediaBudget}`,
      `Media Channels: ${formData.mediaChannels}`,
      `Start Date: ${formData.startDate}`,
      `End Date: ${formData.endDate}`,
      `Created: ${now}`,
    ];
    lines.forEach((text, index) => doc.text(text, 14, startY + index * spacing));

    doc.setLineWidth(0.5);
    doc.setDrawColor(200);
    doc.line(14, startY + lines.length * spacing + 2, 196, startY + lines.length * spacing + 2);

    doc.setFontSize(14);
    doc.setTextColor(0);
    doc.text("Evaluation Summary", 14, startY + lines.length * spacing + 14);

    // Format evaluation text into table
    const tableBody = evaluation
      .split(/\n(?=\d+\.)/)
      .map((section) => {
        const [headingLine, ...bullets] = section.trim().split("\n");
        const heading = headingLine.replace(/^\d+\.\s*/, "").trim();
        const content = bullets.map(line => line.replace(/^- /, "").trim()).join(" • ");
        return [heading, content];
      });

    autoTable(doc, {
      startY: startY + lines.length * spacing + 20,
      head: [["Section", "Insights"]],
      body: tableBody,
      styles: { fontSize: 10, cellPadding: 3 },
      columnStyles: {
        0: { cellWidth: 60, fontStyle: "bold", textColor: [22, 44, 90] },
        1: { cellWidth: 120 }
      },
    });

    doc.setFontSize(10);
    doc.setTextColor(150);
    doc.text("Generated by Bamboo Evaluator", 105, doc.internal.pageSize.height - 10, null, null, "center");

    doc.save(`Bamboo_Evaluation_${formData.brandName || "Campaign"}.pdf`);
  };

  return (
    <div style={{ padding: "2rem", fontFamily: "Arial, sans-serif" }}>
      <form onSubmit={handleSubmit} style={{ maxWidth: "600px", margin: "0 auto" }}>
        <h2 style={{ textAlign: "center", marginBottom: "1.5rem" }}>Submit A Campaign</h2>

        {Object.keys(formData).map((field) => (
          <div key={field} style={{ marginBottom: "1.25rem" }}>
            <label style={{ display: "block", marginBottom: ".5rem", fontWeight: "bold" }}>
              {field.replace(/([A-Z])/g, " $1").replace(/^./, (s) => s.toUpperCase())}
            </label>
            <input
              type={field.toLowerCase().includes("date") ? "date" : "text"}
              name={field}
              value={formData[field]}
              onChange={handleChange}
              placeholder={`Enter ${field.replace(/([A-Z])/g, " $1").toLowerCase()}`}
              style={{
                width: "100%",
                padding: "0.75rem",
                borderRadius: "8px",
                border: "1px solid #ccc",
                fontSize: "1rem",
              }}
              required
            />
          </div>
        ))}

        <button
          type="submit"
          style={{
            width: "100%",
            padding: "1rem",
            backgroundColor: "#1976D2",
            color: "#fff",
            fontSize: "1rem",
            border: "none",
            borderRadius: "8px",
          }}
        >
          🎯 Evaluate Campaign
        </button>
      </form>

      {evaluation && (
        <div style={{ marginTop: "3rem", maxWidth: "800px", marginInline: "auto" }}>
          <h3 style={{ fontSize: "1.25rem", marginBottom: "1rem" }}>🧠 Evaluation Output</h3>
          <div
            style={{
              backgroundColor: "#f9f9f9",
              padding: "1.5rem",
              border: "1px solid #ddd",
              borderRadius: "8px",
              whiteSpace: "pre-wrap",
              lineHeight: "1.6",
              fontSize: "0.95rem"
            }}
          >
            {evaluation}
          </div>

          <button
            onClick={generatePdf}
            style={{
              marginTop: "1.5rem",
              padding: "0.75rem 1.5rem",
              backgroundColor: "#4CAF50",
              color: "#fff",
              border: "none",
              borderRadius: "8px",
              fontSize: "1rem",
            }}
          >
            📄 Download PDF
          </button>
        </div>
      )}
    </div>
  );
}

export default Dashboard;
